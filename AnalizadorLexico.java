/* AnalizadorLexico.java */
/* Generated By:JavaCC: Do not edit this line. AnalizadorLexico.java */
import java.util.*;
import java.io.*;

public class AnalizadorLexico implements AnalizadorLexicoConstants {
    private static List<TokenInfo> tokensEncontrados = new ArrayList<>();
    private static List<ErrorLexico> errores = new ArrayList<>();

    public static void main(String[] args) throws Exception {
        System.out.println("=== FASE LEXICA - ANALIZADOR DE TOKENS ===\n");

        try {
            AnalizadorLexico analizador = new AnalizadorLexico(System.in);
            analizador.analizarTodo();

            if (errores.isEmpty()) {
                System.out.println("FASE LEXICA: Completada correctamente\n");
                mostrarEstadisticas();
            } else {
                System.out.println("FASE LEXICA: ERRORES ENCONTRADOS\n");
                for (ErrorLexico error : errores) {
                    System.out.println(error);
                }
                System.out.println();
                mostrarEstadisticas();
                System.exit(1);
            }

        } catch (Exception e) {
            System.out.println("FASE LEXICA: ERROR FATAL\n");
            System.out.println("Tipo: ERROR DESCONOCIDO");
            System.out.println("Detalles: " + e.getMessage());
            e.printStackTrace();
            System.exit(1);
        }
    }

    public void analizarTodo() {
        Token token;
        while (true) {
            try {
                token = getNextToken();
                if (token.kind == AnalizadorLexicoConstants.EOF) {
                    break;
                }
                registrarToken(token);
            } catch (TokenMgrError e) {
                manejarErrorLexico(e);
                try {
                    token_source.input_stream.readChar();
                } catch (Exception ex) {
                    break;
                }
            }
        }
    }

    private void manejarErrorLexico(TokenMgrError e) {
        String mensaje = e.getMessage();
        int linea = 0;
        int columna = 0;

        if (mensaje.contains("line ")) {
            try {
                int lineaIndex = mensaje.indexOf("line ") + 5;
                int comaIndex = mensaje.indexOf(",", lineaIndex);
                linea = Integer.parseInt(mensaje.substring(lineaIndex, comaIndex).trim());

                int columnaIndex = mensaje.indexOf("column ") + 7;
                int puntoIndex = mensaje.indexOf(".", columnaIndex);
                columna = Integer.parseInt(mensaje.substring(columnaIndex, puntoIndex).trim());
            } catch (Exception ex) {
                // Si no podemos extraer la posición, usamos valores por defecto
            }
        }

        String caracterProblematico = "";
        if (mensaje.contains("Encountered: ")) {
            int encuentroIndex = mensaje.indexOf("Encountered: ") + 13;
            int parentesisIndex = mensaje.indexOf(" (", encuentroIndex);
            if (parentesisIndex > encuentroIndex) {
                caracterProblematico = mensaje.substring(encuentroIndex, parentesisIndex).trim();
            }
        }

        String mensajeError = "Token no reconocido: " + caracterProblematico;
        errores.add(new ErrorLexico(mensajeError, linea, columna));
    }

    public static void registrarToken(Token token) {
        String tipo = obtenerTipoPorKind(token.kind, token.image);
        String lexema = token.image;
        tokensEncontrados.add(new TokenInfo(tipo, lexema, token.beginLine, token.beginColumn));
    }

    private static String obtenerTipoPorKind(int kind, String lexema) {
        switch(kind) {
            // Tipos de datos
            case AnalizadorLexicoConstants.ENTERO:
            case AnalizadorLexicoConstants.REAL:
            case AnalizadorLexicoConstants.CADENA_T:
            case AnalizadorLexicoConstants.LOGICO:
                return "PALABRA_RESERVADA_TIPO";

            // Literales booleanos
            case AnalizadorLexicoConstants.VERDADERO:
            case AnalizadorLexicoConstants.FALSO:
                return "LITERAL_BOOLEANO";

            // E/S
            case AnalizadorLexicoConstants.LEER:
            case AnalizadorLexicoConstants.ESCRIBIR:
                return "PALABRA_RESERVADA_E_S";

            // Condicionales
            case AnalizadorLexicoConstants.SI:
            case AnalizadorLexicoConstants.SINO:
            case AnalizadorLexicoConstants.ENTONCES:
                return "PALABRA_RESERVADA_CONDICIONAL";

            // Ciclos
            case AnalizadorLexicoConstants.MIENTRAS:
            case AnalizadorLexicoConstants.PARA:
            case AnalizadorLexicoConstants.HACER:
                return "PALABRA_RESERVADA_CICLO";

            // Control
            case AnalizadorLexicoConstants.INICIO:
            case AnalizadorLexicoConstants.FIN:
            case AnalizadorLexicoConstants.FUNCION:
            case AnalizadorLexicoConstants.RETORNAR:
                return "PALABRA_RESERVADA_CONTROL";

            // Operadores lógicos
            case AnalizadorLexicoConstants.AND:
            case AnalizadorLexicoConstants.OR:
            case AnalizadorLexicoConstants.NOT:
                return "OPERADOR_LOGICO";

            // Operadores aritméticos
            case AnalizadorLexicoConstants.SUMA:
            case AnalizadorLexicoConstants.RESTA:
            case AnalizadorLexicoConstants.MULTIPLICA:
            case AnalizadorLexicoConstants.DIVIDE:
                return "OPERADOR_ARITMETICO";

            // Operadores relacionales
            case AnalizadorLexicoConstants.MENOR:
            case AnalizadorLexicoConstants.MAYOR:
            case AnalizadorLexicoConstants.MENOR_IGUAL:
            case AnalizadorLexicoConstants.MAYOR_IGUAL:
            case AnalizadorLexicoConstants.IGUAL:
            case AnalizadorLexicoConstants.DIFERENTE:
                return "OPERADOR_RELACIONAL";

            // Asignación
            case AnalizadorLexicoConstants.ASIG:
                return "OPERADOR_ASIGNACION";

            // Números
            case AnalizadorLexicoConstants.NUM_ENTERO:
                return "LITERAL_ENTERO";

            case AnalizadorLexicoConstants.NUM_REAL:
                return "LITERAL_REAL";

            // Cadenas
            case AnalizadorLexicoConstants.CADENA:
                return "LITERAL_CADENA";

            // Símbolos
            case AnalizadorLexicoConstants.PAR_ABRE:
            case AnalizadorLexicoConstants.PAR_CIERRA:
                return "DELIMITADOR_PARENTESIS";

            case AnalizadorLexicoConstants.COR_ABRE:
            case AnalizadorLexicoConstants.COR_CIERRA:
                return "DELIMITADOR_CORCHETE";

            case AnalizadorLexicoConstants.LLAVE_ABRE:
            case AnalizadorLexicoConstants.LLAVE_CIERRA:
                return "DELIMITADOR_LLAVE";

            case AnalizadorLexicoConstants.PUNTO_COMA:
                return "SEPARADOR_PUNTO_COMA";

            case AnalizadorLexicoConstants.COMA:
                return "SEPARADOR_COMA";

            case AnalizadorLexicoConstants.PUNTO:
                return "SEPARADOR_PUNTO";

            case AnalizadorLexicoConstants.DOS_PUNTOS:
                return "SEPARADOR_DOS_PUNTOS";

            // Identificadores
            case AnalizadorLexicoConstants.ID:
                return "IDENTIFICADOR";

            default:
                return "DESCONOCIDO";
        }
    }

    private static void mostrarEstadisticas() {
        Map<String, Integer> estadisticas = new HashMap<>();
        for (TokenInfo t : tokensEncontrados) {
            estadisticas.put(t.tipo, estadisticas.getOrDefault(t.tipo, 0) + 1);
        }

        System.out.println("\n=== ESTADISTICAS ===\n");
        System.out.println("Total de tokens validos: " + tokensEncontrados.size());
        System.out.println("Total de errores: " + errores.size());

        if (!estadisticas.isEmpty()) {
            System.out.println("\nDistribucion por categoria:");
            System.out.println("  " + "=".repeat(50));

            // Ordenar por nombre de categoría
            List<String> categorias = new ArrayList<>(estadisticas.keySet());
            Collections.sort(categorias);

            for (String categoria : categorias) {
                System.out.printf("  %-30s : %3d\n", categoria, estadisticas.get(categoria));
            }
            System.out.println("  " + "=".repeat(50));
        }
    }

    private static void mostrarTokens() {
        if (tokensEncontrados.isEmpty()) {
            System.out.println("No se encontraron tokens\n");
        } else {
            System.out.println("=== TOKENS IDENTIFICADOS ===\n");
            System.out.printf("%-4s %-30s %-20s %s\n", "N\u00ba", "Categoria", "Lexema", "Posicion");
            System.out.println("=".repeat(80));

            for (int i = 0; i < tokensEncontrados.size(); i++) {
                TokenInfo t = tokensEncontrados.get(i);
                System.out.printf("%-4d %-30s %-20s L:%d C:%d\n",
                    (i+1), t.tipo, t.lexema, t.linea, t.columna);
            }
            System.out.println("=".repeat(80));
            System.out.println("Total: " + tokensEncontrados.size() + " tokens\n");
        }
    }

/* ========================
   Regla Principal (Dummy)
   ======================== */
  final public 
void Programa() throws ParseException {
    jj_consume_token(0);
}

  /** Generated Token Manager. */
  public AnalizadorLexicoTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {};
	}

  /** Constructor with InputStream. */
  public AnalizadorLexico(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AnalizadorLexico(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 0; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public AnalizadorLexico(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new AnalizadorLexicoTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Constructor with generated Token Manager. */
  public AnalizadorLexico(AnalizadorLexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  /** Reinitialise. */
  public void ReInit(AnalizadorLexicoTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[51];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 0; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 51; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

class TokenInfo {
    String tipo;
    String lexema;
    int linea;
    int columna;

    TokenInfo(String tipo, String lexema, int linea, int columna) {
        this.tipo = tipo;
        this.lexema = lexema;
        this.linea = linea;
        this.columna = columna;
    }
}

class ErrorLexico {
    String mensaje;
    int linea;
    int columna;

    ErrorLexico(String mensaje, int linea, int columna) {
        this.mensaje = mensaje;
        this.linea = linea;
        this.columna = columna;
    }

    @Override
    public String toString() {
        return String.format("  Linea %d, Columna %d: %s", linea, columna, mensaje);
    }
}

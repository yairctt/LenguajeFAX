/* Generated By:JavaCC: Do not edit this line. AnalizadorLexicoConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorLexicoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ENTERO = 1;
  /** RegularExpression Id. */
  int REAL = 2;
  /** RegularExpression Id. */
  int CADENA_T = 3;
  /** RegularExpression Id. */
  int LOGICO = 4;
  /** RegularExpression Id. */
  int VERDADERO = 5;
  /** RegularExpression Id. */
  int FALSO = 6;
  /** RegularExpression Id. */
  int LEER = 7;
  /** RegularExpression Id. */
  int ESCRIBIR = 8;
  /** RegularExpression Id. */
  int SI = 9;
  /** RegularExpression Id. */
  int SINO = 10;
  /** RegularExpression Id. */
  int ENTONCES = 11;
  /** RegularExpression Id. */
  int MIENTRAS = 12;
  /** RegularExpression Id. */
  int PARA = 13;
  /** RegularExpression Id. */
  int HACER = 14;
  /** RegularExpression Id. */
  int INICIO = 15;
  /** RegularExpression Id. */
  int FIN = 16;
  /** RegularExpression Id. */
  int FUNCION = 17;
  /** RegularExpression Id. */
  int RETORNAR = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int SUMA = 22;
  /** RegularExpression Id. */
  int RESTA = 23;
  /** RegularExpression Id. */
  int MULTIPLICA = 24;
  /** RegularExpression Id. */
  int DIVIDE = 25;
  /** RegularExpression Id. */
  int MENOR_IGUAL = 26;
  /** RegularExpression Id. */
  int MAYOR_IGUAL = 27;
  /** RegularExpression Id. */
  int DIFERENTE = 28;
  /** RegularExpression Id. */
  int IGUAL = 29;
  /** RegularExpression Id. */
  int MENOR = 30;
  /** RegularExpression Id. */
  int MAYOR = 31;
  /** RegularExpression Id. */
  int ASIG = 32;
  /** RegularExpression Id. */
  int PAR_ABRE = 33;
  /** RegularExpression Id. */
  int PAR_CIERRA = 34;
  /** RegularExpression Id. */
  int COR_ABRE = 35;
  /** RegularExpression Id. */
  int COR_CIERRA = 36;
  /** RegularExpression Id. */
  int LLAVE_ABRE = 37;
  /** RegularExpression Id. */
  int LLAVE_CIERRA = 38;
  /** RegularExpression Id. */
  int PUNTO_COMA = 39;
  /** RegularExpression Id. */
  int COMA = 40;
  /** RegularExpression Id. */
  int PUNTO = 41;
  /** RegularExpression Id. */
  int DOS_PUNTOS = 42;
  /** RegularExpression Id. */
  int NUM_REAL = 43;
  /** RegularExpression Id. */
  int NUM_ENTERO = 44;
  /** RegularExpression Id. */
  int CADENA = 45;
  /** RegularExpression Id. */
  int ID = 46;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"entero\"",
    "\"real\"",
    "\"cadena\"",
    "\"logico\"",
    "\"verdadero\"",
    "\"falso\"",
    "\"leer\"",
    "\"escribir\"",
    "\"si\"",
    "\"sino\"",
    "\"entonces\"",
    "\"mientras\"",
    "\"para\"",
    "\"hacer\"",
    "\"inicio\"",
    "\"fin\"",
    "\"funcion\"",
    "\"retornar\"",
    "\"y\"",
    "\"o\"",
    "\"no\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"==\"",
    "\"<\"",
    "\">\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "<NUM_REAL>",
    "<NUM_ENTERO>",
    "<CADENA>",
    "<ID>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
  };

}
